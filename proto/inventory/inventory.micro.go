// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/inventory/inventory.proto

package go_micro_srv_inventory

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Inventory service

type InventoryService interface {
	ReadSupplier(ctx context.Context, in *Request, opts ...client.CallOption) (*Supplier, error)
	SaveSupplier(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Confirm, error)
	ProcessSupplier(ctx context.Context, in *Filter, opts ...client.CallOption) (*SupplierBigData, error)
	GetAllSupplier(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*SupplierBigData, error)
	UpdateSupplier(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Confirm, error)
	DeleteSupplier(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
	ReadPurchaseOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*PurchaseOrder, error)
	SavePurchaseOrder(ctx context.Context, in *PurchaseOrder, opts ...client.CallOption) (*Confirm, error)
	ProcessPurchaseOrder(ctx context.Context, in *Filter, opts ...client.CallOption) (*PurchaseOrderBigData, error)
	GetAllPurchaseOrder(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*PurchaseOrderBigData, error)
	UpdatePurchaseOrder(ctx context.Context, in *PurchaseOrder, opts ...client.CallOption) (*Confirm, error)
	DeletePurchaseOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
	ReadDeliveryNote(ctx context.Context, in *Request, opts ...client.CallOption) (*DeliveryNote, error)
	SaveDeliveryNote(ctx context.Context, in *DeliveryNote, opts ...client.CallOption) (*Confirm, error)
	ProcessDeliveryNote(ctx context.Context, in *Filter, opts ...client.CallOption) (*DeliveryNoteBigData, error)
	GetAllDeliveryNote(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*DeliveryNoteBigData, error)
	UpdateDeliveryNote(ctx context.Context, in *DeliveryNote, opts ...client.CallOption) (*Confirm, error)
	DeleteDeliveryNote(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
	ReadMasterStock(ctx context.Context, in *Request, opts ...client.CallOption) (*MasterStock, error)
	SaveMasterStock(ctx context.Context, in *MasterStock, opts ...client.CallOption) (*Confirm, error)
	ProcessMasterStock(ctx context.Context, in *Filter, opts ...client.CallOption) (*MasterStockBigData, error)
	GetAllMasterStock(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*MasterStockBigData, error)
	UpdateMasterStock(ctx context.Context, in *MasterStock, opts ...client.CallOption) (*Confirm, error)
	DeleteMasterStock(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
	ReadStockPool(ctx context.Context, in *Request, opts ...client.CallOption) (*StockPool, error)
	SaveStockPool(ctx context.Context, in *StockPool, opts ...client.CallOption) (*Confirm, error)
	ProcessStockPool(ctx context.Context, in *Filter, opts ...client.CallOption) (*StockPoolBigData, error)
	GetAllStockPool(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*StockPoolBigData, error)
	UpdateStockPool(ctx context.Context, in *StockPool, opts ...client.CallOption) (*Confirm, error)
	DeleteStockPool(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
	ReadShippingEvent(ctx context.Context, in *Request, opts ...client.CallOption) (*ShippingEvent, error)
	SaveShippingEvent(ctx context.Context, in *ShippingEvent, opts ...client.CallOption) (*Confirm, error)
	ProcessShippingEvent(ctx context.Context, in *Filter, opts ...client.CallOption) (*ShippingEventBigData, error)
	GetAllShippingEvent(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ShippingEventBigData, error)
	UpdateShippingEvent(ctx context.Context, in *ShippingEvent, opts ...client.CallOption) (*Confirm, error)
	DeleteShippingEvent(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error)
}

type inventoryService struct {
	c    client.Client
	name string
}

func NewInventoryService(name string, c client.Client) InventoryService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.inventory"
	}
	return &inventoryService{
		c:    c,
		name: name,
	}
}

func (c *inventoryService) ReadSupplier(ctx context.Context, in *Request, opts ...client.CallOption) (*Supplier, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadSupplier", in)
	out := new(Supplier)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SaveSupplier(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SaveSupplier", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessSupplier(ctx context.Context, in *Filter, opts ...client.CallOption) (*SupplierBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessSupplier", in)
	out := new(SupplierBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllSupplier(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*SupplierBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllSupplier", in)
	out := new(SupplierBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdateSupplier(ctx context.Context, in *Supplier, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateSupplier", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeleteSupplier(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeleteSupplier", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ReadPurchaseOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*PurchaseOrder, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadPurchaseOrder", in)
	out := new(PurchaseOrder)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SavePurchaseOrder(ctx context.Context, in *PurchaseOrder, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SavePurchaseOrder", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessPurchaseOrder(ctx context.Context, in *Filter, opts ...client.CallOption) (*PurchaseOrderBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessPurchaseOrder", in)
	out := new(PurchaseOrderBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllPurchaseOrder(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*PurchaseOrderBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllPurchaseOrder", in)
	out := new(PurchaseOrderBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdatePurchaseOrder(ctx context.Context, in *PurchaseOrder, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdatePurchaseOrder", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeletePurchaseOrder(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeletePurchaseOrder", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ReadDeliveryNote(ctx context.Context, in *Request, opts ...client.CallOption) (*DeliveryNote, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadDeliveryNote", in)
	out := new(DeliveryNote)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SaveDeliveryNote(ctx context.Context, in *DeliveryNote, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SaveDeliveryNote", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessDeliveryNote(ctx context.Context, in *Filter, opts ...client.CallOption) (*DeliveryNoteBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessDeliveryNote", in)
	out := new(DeliveryNoteBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllDeliveryNote(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*DeliveryNoteBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllDeliveryNote", in)
	out := new(DeliveryNoteBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdateDeliveryNote(ctx context.Context, in *DeliveryNote, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateDeliveryNote", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeleteDeliveryNote(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeleteDeliveryNote", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ReadMasterStock(ctx context.Context, in *Request, opts ...client.CallOption) (*MasterStock, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadMasterStock", in)
	out := new(MasterStock)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SaveMasterStock(ctx context.Context, in *MasterStock, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SaveMasterStock", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessMasterStock(ctx context.Context, in *Filter, opts ...client.CallOption) (*MasterStockBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessMasterStock", in)
	out := new(MasterStockBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllMasterStock(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*MasterStockBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllMasterStock", in)
	out := new(MasterStockBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdateMasterStock(ctx context.Context, in *MasterStock, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateMasterStock", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeleteMasterStock(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeleteMasterStock", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ReadStockPool(ctx context.Context, in *Request, opts ...client.CallOption) (*StockPool, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadStockPool", in)
	out := new(StockPool)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SaveStockPool(ctx context.Context, in *StockPool, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SaveStockPool", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessStockPool(ctx context.Context, in *Filter, opts ...client.CallOption) (*StockPoolBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessStockPool", in)
	out := new(StockPoolBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllStockPool(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*StockPoolBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllStockPool", in)
	out := new(StockPoolBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdateStockPool(ctx context.Context, in *StockPool, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateStockPool", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeleteStockPool(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeleteStockPool", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ReadShippingEvent(ctx context.Context, in *Request, opts ...client.CallOption) (*ShippingEvent, error) {
	req := c.c.NewRequest(c.name, "Inventory.ReadShippingEvent", in)
	out := new(ShippingEvent)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) SaveShippingEvent(ctx context.Context, in *ShippingEvent, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.SaveShippingEvent", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) ProcessShippingEvent(ctx context.Context, in *Filter, opts ...client.CallOption) (*ShippingEventBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.ProcessShippingEvent", in)
	out := new(ShippingEventBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) GetAllShippingEvent(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*ShippingEventBigData, error) {
	req := c.c.NewRequest(c.name, "Inventory.GetAllShippingEvent", in)
	out := new(ShippingEventBigData)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) UpdateShippingEvent(ctx context.Context, in *ShippingEvent, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.UpdateShippingEvent", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryService) DeleteShippingEvent(ctx context.Context, in *Request, opts ...client.CallOption) (*Confirm, error) {
	req := c.c.NewRequest(c.name, "Inventory.DeleteShippingEvent", in)
	out := new(Confirm)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Inventory service

type InventoryHandler interface {
	ReadSupplier(context.Context, *Request, *Supplier) error
	SaveSupplier(context.Context, *Supplier, *Confirm) error
	ProcessSupplier(context.Context, *Filter, *SupplierBigData) error
	GetAllSupplier(context.Context, *EmptyRequest, *SupplierBigData) error
	UpdateSupplier(context.Context, *Supplier, *Confirm) error
	DeleteSupplier(context.Context, *Request, *Confirm) error
	ReadPurchaseOrder(context.Context, *Request, *PurchaseOrder) error
	SavePurchaseOrder(context.Context, *PurchaseOrder, *Confirm) error
	ProcessPurchaseOrder(context.Context, *Filter, *PurchaseOrderBigData) error
	GetAllPurchaseOrder(context.Context, *EmptyRequest, *PurchaseOrderBigData) error
	UpdatePurchaseOrder(context.Context, *PurchaseOrder, *Confirm) error
	DeletePurchaseOrder(context.Context, *Request, *Confirm) error
	ReadDeliveryNote(context.Context, *Request, *DeliveryNote) error
	SaveDeliveryNote(context.Context, *DeliveryNote, *Confirm) error
	ProcessDeliveryNote(context.Context, *Filter, *DeliveryNoteBigData) error
	GetAllDeliveryNote(context.Context, *EmptyRequest, *DeliveryNoteBigData) error
	UpdateDeliveryNote(context.Context, *DeliveryNote, *Confirm) error
	DeleteDeliveryNote(context.Context, *Request, *Confirm) error
	ReadMasterStock(context.Context, *Request, *MasterStock) error
	SaveMasterStock(context.Context, *MasterStock, *Confirm) error
	ProcessMasterStock(context.Context, *Filter, *MasterStockBigData) error
	GetAllMasterStock(context.Context, *EmptyRequest, *MasterStockBigData) error
	UpdateMasterStock(context.Context, *MasterStock, *Confirm) error
	DeleteMasterStock(context.Context, *Request, *Confirm) error
	ReadStockPool(context.Context, *Request, *StockPool) error
	SaveStockPool(context.Context, *StockPool, *Confirm) error
	ProcessStockPool(context.Context, *Filter, *StockPoolBigData) error
	GetAllStockPool(context.Context, *EmptyRequest, *StockPoolBigData) error
	UpdateStockPool(context.Context, *StockPool, *Confirm) error
	DeleteStockPool(context.Context, *Request, *Confirm) error
	ReadShippingEvent(context.Context, *Request, *ShippingEvent) error
	SaveShippingEvent(context.Context, *ShippingEvent, *Confirm) error
	ProcessShippingEvent(context.Context, *Filter, *ShippingEventBigData) error
	GetAllShippingEvent(context.Context, *EmptyRequest, *ShippingEventBigData) error
	UpdateShippingEvent(context.Context, *ShippingEvent, *Confirm) error
	DeleteShippingEvent(context.Context, *Request, *Confirm) error
}

func RegisterInventoryHandler(s server.Server, hdlr InventoryHandler, opts ...server.HandlerOption) error {
	type inventory interface {
		ReadSupplier(ctx context.Context, in *Request, out *Supplier) error
		SaveSupplier(ctx context.Context, in *Supplier, out *Confirm) error
		ProcessSupplier(ctx context.Context, in *Filter, out *SupplierBigData) error
		GetAllSupplier(ctx context.Context, in *EmptyRequest, out *SupplierBigData) error
		UpdateSupplier(ctx context.Context, in *Supplier, out *Confirm) error
		DeleteSupplier(ctx context.Context, in *Request, out *Confirm) error
		ReadPurchaseOrder(ctx context.Context, in *Request, out *PurchaseOrder) error
		SavePurchaseOrder(ctx context.Context, in *PurchaseOrder, out *Confirm) error
		ProcessPurchaseOrder(ctx context.Context, in *Filter, out *PurchaseOrderBigData) error
		GetAllPurchaseOrder(ctx context.Context, in *EmptyRequest, out *PurchaseOrderBigData) error
		UpdatePurchaseOrder(ctx context.Context, in *PurchaseOrder, out *Confirm) error
		DeletePurchaseOrder(ctx context.Context, in *Request, out *Confirm) error
		ReadDeliveryNote(ctx context.Context, in *Request, out *DeliveryNote) error
		SaveDeliveryNote(ctx context.Context, in *DeliveryNote, out *Confirm) error
		ProcessDeliveryNote(ctx context.Context, in *Filter, out *DeliveryNoteBigData) error
		GetAllDeliveryNote(ctx context.Context, in *EmptyRequest, out *DeliveryNoteBigData) error
		UpdateDeliveryNote(ctx context.Context, in *DeliveryNote, out *Confirm) error
		DeleteDeliveryNote(ctx context.Context, in *Request, out *Confirm) error
		ReadMasterStock(ctx context.Context, in *Request, out *MasterStock) error
		SaveMasterStock(ctx context.Context, in *MasterStock, out *Confirm) error
		ProcessMasterStock(ctx context.Context, in *Filter, out *MasterStockBigData) error
		GetAllMasterStock(ctx context.Context, in *EmptyRequest, out *MasterStockBigData) error
		UpdateMasterStock(ctx context.Context, in *MasterStock, out *Confirm) error
		DeleteMasterStock(ctx context.Context, in *Request, out *Confirm) error
		ReadStockPool(ctx context.Context, in *Request, out *StockPool) error
		SaveStockPool(ctx context.Context, in *StockPool, out *Confirm) error
		ProcessStockPool(ctx context.Context, in *Filter, out *StockPoolBigData) error
		GetAllStockPool(ctx context.Context, in *EmptyRequest, out *StockPoolBigData) error
		UpdateStockPool(ctx context.Context, in *StockPool, out *Confirm) error
		DeleteStockPool(ctx context.Context, in *Request, out *Confirm) error
		ReadShippingEvent(ctx context.Context, in *Request, out *ShippingEvent) error
		SaveShippingEvent(ctx context.Context, in *ShippingEvent, out *Confirm) error
		ProcessShippingEvent(ctx context.Context, in *Filter, out *ShippingEventBigData) error
		GetAllShippingEvent(ctx context.Context, in *EmptyRequest, out *ShippingEventBigData) error
		UpdateShippingEvent(ctx context.Context, in *ShippingEvent, out *Confirm) error
		DeleteShippingEvent(ctx context.Context, in *Request, out *Confirm) error
	}
	type Inventory struct {
		inventory
	}
	h := &inventoryHandler{hdlr}
	return s.Handle(s.NewHandler(&Inventory{h}, opts...))
}

type inventoryHandler struct {
	InventoryHandler
}

func (h *inventoryHandler) ReadSupplier(ctx context.Context, in *Request, out *Supplier) error {
	return h.InventoryHandler.ReadSupplier(ctx, in, out)
}

func (h *inventoryHandler) SaveSupplier(ctx context.Context, in *Supplier, out *Confirm) error {
	return h.InventoryHandler.SaveSupplier(ctx, in, out)
}

func (h *inventoryHandler) ProcessSupplier(ctx context.Context, in *Filter, out *SupplierBigData) error {
	return h.InventoryHandler.ProcessSupplier(ctx, in, out)
}

func (h *inventoryHandler) GetAllSupplier(ctx context.Context, in *EmptyRequest, out *SupplierBigData) error {
	return h.InventoryHandler.GetAllSupplier(ctx, in, out)
}

func (h *inventoryHandler) UpdateSupplier(ctx context.Context, in *Supplier, out *Confirm) error {
	return h.InventoryHandler.UpdateSupplier(ctx, in, out)
}

func (h *inventoryHandler) DeleteSupplier(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeleteSupplier(ctx, in, out)
}

func (h *inventoryHandler) ReadPurchaseOrder(ctx context.Context, in *Request, out *PurchaseOrder) error {
	return h.InventoryHandler.ReadPurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) SavePurchaseOrder(ctx context.Context, in *PurchaseOrder, out *Confirm) error {
	return h.InventoryHandler.SavePurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) ProcessPurchaseOrder(ctx context.Context, in *Filter, out *PurchaseOrderBigData) error {
	return h.InventoryHandler.ProcessPurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) GetAllPurchaseOrder(ctx context.Context, in *EmptyRequest, out *PurchaseOrderBigData) error {
	return h.InventoryHandler.GetAllPurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) UpdatePurchaseOrder(ctx context.Context, in *PurchaseOrder, out *Confirm) error {
	return h.InventoryHandler.UpdatePurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) DeletePurchaseOrder(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeletePurchaseOrder(ctx, in, out)
}

func (h *inventoryHandler) ReadDeliveryNote(ctx context.Context, in *Request, out *DeliveryNote) error {
	return h.InventoryHandler.ReadDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) SaveDeliveryNote(ctx context.Context, in *DeliveryNote, out *Confirm) error {
	return h.InventoryHandler.SaveDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) ProcessDeliveryNote(ctx context.Context, in *Filter, out *DeliveryNoteBigData) error {
	return h.InventoryHandler.ProcessDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) GetAllDeliveryNote(ctx context.Context, in *EmptyRequest, out *DeliveryNoteBigData) error {
	return h.InventoryHandler.GetAllDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) UpdateDeliveryNote(ctx context.Context, in *DeliveryNote, out *Confirm) error {
	return h.InventoryHandler.UpdateDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) DeleteDeliveryNote(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeleteDeliveryNote(ctx, in, out)
}

func (h *inventoryHandler) ReadMasterStock(ctx context.Context, in *Request, out *MasterStock) error {
	return h.InventoryHandler.ReadMasterStock(ctx, in, out)
}

func (h *inventoryHandler) SaveMasterStock(ctx context.Context, in *MasterStock, out *Confirm) error {
	return h.InventoryHandler.SaveMasterStock(ctx, in, out)
}

func (h *inventoryHandler) ProcessMasterStock(ctx context.Context, in *Filter, out *MasterStockBigData) error {
	return h.InventoryHandler.ProcessMasterStock(ctx, in, out)
}

func (h *inventoryHandler) GetAllMasterStock(ctx context.Context, in *EmptyRequest, out *MasterStockBigData) error {
	return h.InventoryHandler.GetAllMasterStock(ctx, in, out)
}

func (h *inventoryHandler) UpdateMasterStock(ctx context.Context, in *MasterStock, out *Confirm) error {
	return h.InventoryHandler.UpdateMasterStock(ctx, in, out)
}

func (h *inventoryHandler) DeleteMasterStock(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeleteMasterStock(ctx, in, out)
}

func (h *inventoryHandler) ReadStockPool(ctx context.Context, in *Request, out *StockPool) error {
	return h.InventoryHandler.ReadStockPool(ctx, in, out)
}

func (h *inventoryHandler) SaveStockPool(ctx context.Context, in *StockPool, out *Confirm) error {
	return h.InventoryHandler.SaveStockPool(ctx, in, out)
}

func (h *inventoryHandler) ProcessStockPool(ctx context.Context, in *Filter, out *StockPoolBigData) error {
	return h.InventoryHandler.ProcessStockPool(ctx, in, out)
}

func (h *inventoryHandler) GetAllStockPool(ctx context.Context, in *EmptyRequest, out *StockPoolBigData) error {
	return h.InventoryHandler.GetAllStockPool(ctx, in, out)
}

func (h *inventoryHandler) UpdateStockPool(ctx context.Context, in *StockPool, out *Confirm) error {
	return h.InventoryHandler.UpdateStockPool(ctx, in, out)
}

func (h *inventoryHandler) DeleteStockPool(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeleteStockPool(ctx, in, out)
}

func (h *inventoryHandler) ReadShippingEvent(ctx context.Context, in *Request, out *ShippingEvent) error {
	return h.InventoryHandler.ReadShippingEvent(ctx, in, out)
}

func (h *inventoryHandler) SaveShippingEvent(ctx context.Context, in *ShippingEvent, out *Confirm) error {
	return h.InventoryHandler.SaveShippingEvent(ctx, in, out)
}

func (h *inventoryHandler) ProcessShippingEvent(ctx context.Context, in *Filter, out *ShippingEventBigData) error {
	return h.InventoryHandler.ProcessShippingEvent(ctx, in, out)
}

func (h *inventoryHandler) GetAllShippingEvent(ctx context.Context, in *EmptyRequest, out *ShippingEventBigData) error {
	return h.InventoryHandler.GetAllShippingEvent(ctx, in, out)
}

func (h *inventoryHandler) UpdateShippingEvent(ctx context.Context, in *ShippingEvent, out *Confirm) error {
	return h.InventoryHandler.UpdateShippingEvent(ctx, in, out)
}

func (h *inventoryHandler) DeleteShippingEvent(ctx context.Context, in *Request, out *Confirm) error {
	return h.InventoryHandler.DeleteShippingEvent(ctx, in, out)
}
